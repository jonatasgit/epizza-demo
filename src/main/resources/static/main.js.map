{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/main-nav/main-nav.component.css","webpack:///./src/app/main-nav/main-nav.component.html","webpack:///./src/app/main-nav/main-nav.component.ts","webpack:///./src/app/material.ts","webpack:///./src/app/models/cardapio.ts","webpack:///./src/app/models/pedido.ts","webpack:///./src/app/models/produto.ts","webpack:///./src/app/pedido/dialog-adicionar-produto/dialog-adicionar-produto.component.css","webpack:///./src/app/pedido/dialog-adicionar-produto/dialog-adicionar-produto.component.html","webpack:///./src/app/pedido/dialog-adicionar-produto/dialog-adicionar-produto.component.ts","webpack:///./src/app/pedido/pedido.component.css","webpack:///./src/app/pedido/pedido.component.html","webpack:///./src/app/pedido/pedido.component.ts","webpack:///./src/app/pedidos.service.ts","webpack:///./src/app/scanner-qrcode/scanner-qrcode.component.css","webpack:///./src/app/scanner-qrcode/scanner-qrcode.component.html","webpack:///./src/app/scanner-qrcode/scanner-qrcode.component.ts","webpack:///./src/app/services/pedido-data.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<app-main-nav [pedidoBar]=\\\"pedidoBar\\\">\\n  <app-scanner-qrcode *ngIf=\\\"!valorQrCode\\\"  (valorQrCode)=\\\"recebendoValorScanner($event)\\\"></app-scanner-qrcode>\\n  <app-pedido         *ngIf=\\\"valorQrCode\\\" [valorQrCode]=\\\"valorQrCode\\\" (pedidoBar)=\\\"recebendoMeuPedidobar($event)\\\"></app-pedido>   \\n</app-main-nav>\\n\\n\"","import { Component } from '@angular/core';\nimport { Pedido } from './models/pedido';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n  valorQrCode: string =  '';\n  pedidoBar: Pedido = new Pedido;\n\n  recebendoValorScanner(valorQrCode){\n   this.valorQrCode = valorQrCode;\n  }\n\n  recebendoMeuPedidobar(pedidoBar){\n    this.pedidoBar = pedidoBar;\n    \n  }\n  \n}\n\n\n\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule  } from '@angular/common/http';\nimport { FormsModule, ReactiveFormsModule   } from '@angular/forms';\n\nimport { ZXingScannerModule } from '@zxing/ngx-scanner';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport { MaterialModule } from './material';\n\nimport { AppComponent } from './app.component';\nimport { PedidoComponent } from './pedido/pedido.component';\nimport { ScannerQrcodeComponent } from './scanner-qrcode/scanner-qrcode.component';\nimport { PedidosService } from './pedidos.service';\nimport { MainNavComponent } from './main-nav/main-nav.component';\nimport { LayoutModule } from '@angular/cdk/layout';\nimport { MatToolbarModule, MatButtonModule, MatSidenavModule, MatIconModule, MatListModule } from '@angular/material';\nimport { BlockUIModule } from 'ng-block-ui';\nimport { DialogAdicionarProdutoComponent } from './pedido/dialog-adicionar-produto/dialog-adicionar-produto.component';\n\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    PedidoComponent,\n    ScannerQrcodeComponent,\n    MainNavComponent,\n    DialogAdicionarProdutoComponent\n  ],\n  imports: [\n    BrowserModule,\n    ZXingScannerModule,\n    BrowserAnimationsModule,\n    MaterialModule,\n    LayoutModule,\n    MatToolbarModule,\n    MatButtonModule,\n    MatSidenavModule,\n    MatIconModule,\n    MatListModule,\n    HttpClientModule,\n    BlockUIModule.forRoot(),\n    FormsModule,\n    ReactiveFormsModule \n  ],\n  providers: [ PedidosService],\n  bootstrap: [AppComponent],\n  entryComponents: [\n    DialogAdicionarProdutoComponent\n  ]\n})\nexport class AppModule { }\n","module.exports = \".sidenav-container {\\n  height: 100%;\\n}\\n\\n.sidenav {\\n  width: 300px;\\n}\\n\\n.mat-toolbar.mat-primary {\\n  position: -webkit-sticky;\\n  position: sticky;\\n  top: 0;\\n}\\n\\n\"","module.exports = \"<mat-sidenav-container class=\\\"sidenav-container\\\">\\n  <mat-sidenav\\n    #drawer\\n    class=\\\"sidenav\\\"\\n    fixedInViewport=\\\"true\\\"\\n    [attr.role]=\\\"(isHandset$ | async) ? 'dialog' : 'navigation'\\\"\\n    [mode]=\\\"(isHandset$ | async) ? 'over' : 'side'\\\"\\n    [opened]=\\\"!(isHandset$ | async)\\\">\\n    <mat-toolbar color=\\\"primary\\\">Menu</mat-toolbar>\\n    <mat-nav-list>\\n        <!-- MEU PEDIDO -->\\n      <mat-accordion class=\\\"example-headers-align\\\">          \\n          <mat-expansion-panel hideToggle>           \\n            <mat-expansion-panel-header>      \\n              <mat-panel-title>\\n                <b>Meu pedido</b>\\n              </mat-panel-title>\\n              <mat-panel-description>\\n                  <p *ngIf=\\\"pedidoBar.produtos.length > 0\\\">Detalhes</p>\\n                  <mat-icon *ngIf=\\\"pedidoBar.produtos.length > 0\\\" matBadge={{pedidoBar.produtos.length}} matBadgePosition=\\\"below after\\\" matBadgeColor=\\\"warn\\\"> shopping_cart</mat-icon> \\n              </mat-panel-description>\\n            </mat-expansion-panel-header>\\n            \\n            <mat-grid-list cols=\\\"5\\\" rowHeight=\\\"2:1\\\" >\\n                    <mat-grid-tile [colspan]=2><b>Item</b></mat-grid-tile>\\n                    <mat-grid-tile [colspan]=1><b>Total</b></mat-grid-tile>\\n                    <mat-grid-tile [colspan]=1><b>Qtde.</b></mat-grid-tile>\\n                    <mat-grid-tile [colspan]=1></mat-grid-tile>\\n                  </mat-grid-list>  \\n            <div *ngFor=\\\"let produto of pedidoBar.produtos\\\">\\n                <mat-grid-list cols=\\\"5\\\" rowHeight=\\\"1:2\\\" >\\n                    <mat-grid-tile [colspan]=2>{{ produto.nome }}</mat-grid-tile>\\n                    <mat-grid-tile [colspan]=1>{{ produto.preco}}</mat-grid-tile>\\n                    <mat-grid-tile [colspan]=1>{{produto.quantidade }}</mat-grid-tile>\\n                    <mat-grid-tile>\\n                        <button mat-icon-button color=\\\"warn\\\" (click)=\\\"removerProduto(produto)\\\">                    \\n                            <mat-icon>remove_circle</mat-icon>\\n                        </button>  \\n                    </mat-grid-tile>\\n                  </mat-grid-list>   \\n                  <mat-grid-list cols=\\\"5\\\" rowHeight=\\\"1:1\\\" *ngIf=\\\"produto.observacao  != null\\\">\\n                        <mat-grid-tile [colspan]=5><b>Obs:</b>{{ produto.observacao }}</mat-grid-tile>\\n                  </mat-grid-list>                 \\n            </div>\\n            <hr>\\n            <div *ngIf=\\\"pedidoBar.produtos.length > 0\\\">\\n              <mat-grid-list cols=\\\"5\\\" rowHeight=\\\"2:1\\\" >\\n                  <mat-grid-tile [colspan]=3>Total do Pedido</mat-grid-tile>\\n                  <mat-grid-tile [colspan]=2><b>{{ minhaConta | currency:'BRL'}}</b></mat-grid-tile>                  \\n              </mat-grid-list> \\n              <mat-grid-list cols=\\\"4\\\" rowHeight=\\\"2:1\\\" >\\n                  \\n                  <mat-grid-tile [colspan]=\\\"2\\\">\\n                      <button mat-raised-button color=\\\"accent\\\" (click)=\\\"enviarPedido()\\\">\\n                          Enviar Pedido\\n                          <mat-icon>send</mat-icon>\\n                      </button>  \\n                  </mat-grid-tile>    \\n                  <mat-grid-tile></mat-grid-tile>      \\n                  <mat-grid-tile><button mat-button color=\\\"primary\\\" (click)=\\\"drawer.toggle()\\\">Esconder</button></mat-grid-tile>\\n              </mat-grid-list>                 \\n          </div>      \\n          </mat-expansion-panel>        \\n        </mat-accordion>\\n         <!-- FINAL MEU PEDIDO -->\\n        <!-- PEDIDOS ENVIADOS -->\\n          <mat-accordion class=\\\"example-headers-align\\\" *ngIf=\\\"pedidosEnviados?.produtos.length > 0\\\">\\n            <mat-expansion-panel [expanded]=\\\"step === 1\\\" (opened)=\\\"setStep(1)\\\"  hideToggle>\\n              <mat-expansion-panel-header>      \\n                <mat-panel-title>\\n                  <b>Minha Conta</b>\\n                </mat-panel-title>\\n                <mat-panel-description>\\n                    <p>Pedidos enviados</p>\\n                    <mat-icon  matBadge={{pedidosEnviados?.produtos.length}} matBadgeColor=\\\"primary\\\">local_pizza</mat-icon>\\n                  \\n                </mat-panel-description>\\n              </mat-expansion-panel-header>\\n              \\n              <div *ngFor=\\\"let enviado of pedidosEnviados?.produtos\\\">\\n                  <mat-grid-list cols=\\\"4\\\" rowHeight=\\\"2:1\\\" >\\n                      <mat-grid-tile>{{ enviado.nome }}</mat-grid-tile>\\n                      <mat-grid-tile>{{ enviado.preco | currency:'BRL'}}</mat-grid-tile>\\n                      <mat-grid-tile></mat-grid-tile>\\n                      <mat-grid-tile>\\n                        \\n                      </mat-grid-tile>\\n                    </mat-grid-list>                    \\n              </div>\\n              <mat-grid-list cols=\\\"4\\\" rowHeight=\\\"2:1\\\" >\\n                    <mat-grid-tile>Total: </mat-grid-tile>\\n                    <mat-grid-tile><b>{{ minhaConta | currency:'BRL'}}</b></mat-grid-tile>\\n                    <mat-grid-tile></mat-grid-tile>\\n                    <mat-grid-tile></mat-grid-tile>          \\n                </mat-grid-list> \\n              <mat-grid-list cols=\\\"4\\\" rowHeight=\\\"2:1\\\" >\\n              \\n                    <mat-grid-tile [colspan]=\\\"2\\\">\\n                        <button mat-raised-button color=\\\"accent\\\" (click)=\\\"fecharConta()\\\">\\n                            Fechar Conta\\n                            <mat-icon>payment</mat-icon>\\n                        </button>  \\n                    </mat-grid-tile>    \\n                    <mat-grid-tile></mat-grid-tile>      \\n                    <mat-grid-tile><button mat-button color=\\\"accent\\\" (click)=\\\"closeStep()\\\">Esconder</button></mat-grid-tile>\\n                </mat-grid-list>   \\n            </mat-expansion-panel>\\n          </mat-accordion>\\n      <!-- <a mat-list-item href=\\\"#\\\">Link 2</a>\\n      <a mat-list-item href=\\\"#\\\">Link 3</a> -->\\n    </mat-nav-list>\\n  </mat-sidenav>\\n  <mat-sidenav-content>\\n    <mat-toolbar color=\\\"primary\\\">\\n      <!-- <button\\n        type=\\\"button\\\"\\n        aria-label=\\\"Toggle sidenav\\\"\\n        mat-icon-button\\n        (click)=\\\"drawer.toggle()\\\"\\n        *ngIf=\\\"isHandset$ | async\\\">\\n        <mat-icon aria-label=\\\"Side nav toggle icon\\\">menu</mat-icon>\\n      </button> -->\\n      <span id=\\\"titulo\\\" layout-align=\\\"center center\\\">GarçomFácil</span>\\n    </mat-toolbar>\\n    <!-- MEU PEDIDO TOOLBAR -->\\n    <mat-toolbar color=\\\"primary\\\" *ngIf=\\\"pedidoBar.produtos.length > 0\\\">\\n            <button\\n              type=\\\"button\\\"\\n              aria-label=\\\"Toggle sidenav\\\"\\n              mat-icon-button\\n              (click)=\\\"drawer.toggle()\\\"\\n              *ngIf=\\\"isHandset$ | async\\\">\\n              <span id=\\\"titulo\\\" layout-align=\\\"center center\\\">Carrinho</span>\\n              <mat-icon *ngIf=\\\"pedidoBar.produtos.length > 0\\\" matBadge={{pedidoBar.produtos.length}} matBadgePosition=\\\"below after\\\" matBadgeColor=\\\"warn\\\"> shopping_cart</mat-icon> \\n            </button>\\n            &nbsp; &nbsp;&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp;&nbsp;\\n            <button\\n            type=\\\"button\\\"\\n            aria-label=\\\"Toggle sidenav\\\"\\n            mat-icon-button\\n            (click)=\\\"drawer.toggle()\\\"\\n            *ngIf=\\\"isHandset$ | async\\\">\\n            <span id=\\\"titulo\\\" layout-align=\\\"center center\\\">Total: {{ minhaConta | currency:'BRL'}}</span>\\n            \\n          </button>                                       \\n    </mat-toolbar>\\n    <ng-content></ng-content>\\n  </mat-sidenav-content>\\n</mat-sidenav-container>\\n\"","import { Component, Input, OnInit} from '@angular/core';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Produto } from '../models/produto';\nimport { Pedido } from '../models/pedido';\nimport { PedidoDataService } from '../services/pedido-data.service';\nimport { PedidosService } from '../pedidos.service';\n\n@Component({\n  selector: 'app-main-nav',\n  templateUrl: './main-nav.component.html',\n  styleUrls: ['./main-nav.component.css']\n})\nexport class MainNavComponent implements OnInit  {\n  \n\n  @Input()\n  pedidoBar: Pedido;\n  minhaConta: number;\n  retornoEnviarPedido: any;\n  pedidosEnviados: Pedido;\n\n  isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)\n    .pipe(\n      map(result => result.matches)\n    );\n  \n  constructor(private breakpointObserver: BreakpointObserver, private pedidoDataService: PedidoDataService, private pedidosService: PedidosService) {}\n\n  ngOnInit() {\n    this.pedidoDataService.currentConta.subscribe(valor => this.minhaConta = valor);\n  }  \n\n  removerProduto(produtoRemovido: Produto){    \n    for(let i = 0; i < this.pedidoBar.produtos.length; i++){\n      if(this.pedidoBar.produtos[i].id == produtoRemovido.id && this.pedidoBar.produtos[i].quantidade == produtoRemovido.quantidade && this.pedidoBar.produtos[i].observacao == produtoRemovido.observacao){\n        this.pedidoBar.produtos.splice(i, 1);\n      }\n    }\n    \n    this.pedidoDataService.changeContaRmv(produtoRemovido.preco);\n  }\n\n  enviarPedido(){\n    this.pedidosService.enviarPedido(this.pedidoBar).subscribe(retorno => this.retornoEnviarPedido = retorno );\n    let addPedidoEnviado: Pedido = this.pedidoBar;\n    this.pedidosEnviados = addPedidoEnviado;\n    this.pedidoBar.produtos = [];\n    \n    alert('Seu pedido foi enviado!');\n  }\n}\n","\r\nimport { NgModule } from '@angular/core'\r\nimport {MatCardModule, MatButtonModule, MatIconModule, MatMenuModule, MatToolbarModule, MatGridListModule, MatExpansionModule } from '@angular/material';\r\nimport {MatBadgeModule} from '@angular/material/badge';\r\nimport {MatInputModule} from '@angular/material/input';\r\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\r\nimport {MatDialogModule} from '@angular/material/dialog';\r\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle'\r\nimport {MatRadioModule} from '@angular/material/radio';\r\nimport {MatStepperModule} from '@angular/material/stepper';\r\n\r\n@NgModule({\r\n  imports: [MatCardModule, MatButtonModule, MatIconModule, MatMenuModule, MatToolbarModule, MatGridListModule, MatExpansionModule, MatBadgeModule, MatInputModule, MatSnackBarModule, MatDialogModule, MatSlideToggleModule, MatRadioModule, MatStepperModule],\r\n  exports: [MatCardModule, MatButtonModule, MatIconModule, MatMenuModule, MatToolbarModule, MatGridListModule, MatExpansionModule, MatBadgeModule, MatInputModule, MatSnackBarModule, MatDialogModule, MatSlideToggleModule, MatRadioModule, MatStepperModule],\r\n})\r\nexport class MaterialModule { }","import { Categoria } from \"./categoria\";\r\nimport { Cliente } from \"./cliente\";\r\nimport { Produto } from \"./produto\";\r\n\r\nexport class Cardapio{\r\n    produtos: Produto[];\r\n    categorias: Categoria[];\r\n    mesa: string;\r\n    cliente: Cliente;\r\n}","import { Produto } from \"./produto\";\r\nimport { Cliente } from \"./cliente\";\r\n\r\nexport class Pedido{\r\n    produtos: Produto[] = [];\r\n    cliente: Cliente;\r\n    mesa: string;\r\n    apelido: string;\r\n    status: string;\r\n    conta: number;\r\n}","import { Categoria } from \"./categoria\";\r\nimport { Cliente } from \"./cliente\";\r\n\r\nexport class Produto{\r\n    id: string;\r\n    nome: string;\r\n    descricao: string;\r\n    preco: number;\r\n    disponivel: boolean;\r\n    categoria: Categoria;\r\n    cliente: Cliente;\r\n    quantidade: number;\r\n    observacao: string;\r\n}","module.exports = \".obsProduto {\\r\\n    width: 100%;\\r\\n  }\\r\\n  .quantidadeProduto {\\r\\n    width: 40%;\\r\\n  }\\r\\n  .centralize{\\r\\n    text-align: center;\\r\\n  }\\r\\n \\r\\n\"","module.exports = \"<section class=\\\"mat-typography\\\">\\n  <h3 mat-dialog-title>Adicionar <b>{{data.nomeProduto}}</b></h3>\\n  <div *ngIf=\\\"data.permite2Sabores == true\\\">\\n      <mat-slide-toggle [(ngModel)]=\\\"checked\\\" (click)=\\\"iniciaRotina2Sabores()\\\">Deseja 2 sabores?</mat-slide-toggle>\\n  </div>\\n  <div mat-dialog-content >\\n    <div *ngIf=\\\"checked == true\\\">   \\n         \\n      <mat-horizontal-stepper [linear]=\\\"isLinear\\\" #stepper>\\n        <mat-step [stepControl]=\\\"firstFormGroup\\\">\\n          <form [formGroup]=\\\"firstFormGroup\\\">\\n            <!-- <ng-template matStepLabel></ng-template> -->\\n            <b class=\\\"centralize\\\">Escolha o 2º sabor!</b> \\n            <BR>\\n            <div *ngFor=\\\"let produtoCardapio of data.cardapio2Sabores\\\" >\\n                <mat-grid-list cols=\\\"4\\\" rowHeight=\\\"2:1\\\" >\\n                    <mat-grid-tile [colspan]=3><b>{{ produtoCardapio.nome }}</b></mat-grid-tile>\\n                    <mat-grid-tile [colspan]=1>\\n                      <button mat-icon-button color=\\\"accent\\\" (click)=\\\"onChooseSegundoSabor(produtoCardapio, stepper)\\\">                    \\n                        <mat-icon>add_circle</mat-icon>\\n                      </button>                                          \\n                    </mat-grid-tile>\\n                </mat-grid-list> \\n                <mat-grid-list cols=\\\"1\\\" rowHeight=\\\"10:1\\\" >                   \\n                    <mat-grid-tile [colspan]=1>{{ produtoCardapio.preco | currency:'BRL'}}</mat-grid-tile>                                                             \\n                </mat-grid-list>   \\n                <span>{{ produtoCardapio.descricao }} </span>\\n                <hr>                            \\n            </div>            \\n          </form>\\n        </mat-step>\\n        <mat-step [stepControl]=\\\"secondFormGroup\\\">         \\n            <ng-template matStepLabel></ng-template>\\n            <mat-form-field class=\\\"obsProduto\\\">    \\n              <textarea matInput [(ngModel)]=\\\"data.observacao\\\" placeholder=\\\"Observação:\\\"></textarea>\\n            </mat-form-field>\\n            <mat-form-field class=\\\"quantidadeProduto\\\">\\n                <input matInput [(ngModel)]=\\\"data.quantidade\\\" (change)=\\\"onChangeQuantidade()\\\" placeholder=\\\"Quantidade\\\" type=\\\"number\\\">\\n            </mat-form-field>            \\n        </mat-step>        \\n      </mat-horizontal-stepper>      \\n         \\n          \\n        \\n       \\n    </div>\\n    \\n    <mat-form-field class=\\\"obsProduto\\\" *ngIf=\\\"!checked == true\\\">    \\n      <textarea matInput [(ngModel)]=\\\"data.observacao\\\" placeholder=\\\"Observação:\\\"></textarea>\\n    </mat-form-field>\\n    <mat-form-field class=\\\"quantidadeProduto\\\" *ngIf=\\\"!checked == true\\\">\\n        <input matInput [(ngModel)]=\\\"data.quantidade\\\" (change)=\\\"onChangeQuantidade()\\\" placeholder=\\\"Quantidade\\\" type=\\\"number\\\">\\n    </mat-form-field>\\n  </div>\\n  <div mat-dialog-actions>\\n    <button mat-button (click)=\\\"onCancelClick()\\\">Cancelar</button>\\n    <button mat-button (click)=\\\"onOkClick()\\\" cdkFocusInitial [disabled]=\\\"desabilitaBtnOK\\\">Ok</button>\\n  </div>\\n</section>\"","import { Component, Inject, OnInit } from '@angular/core';\n\nimport {MatDialogRef, MAT_DIALOG_DATA, MatSnackBarConfig, MatSnackBar, MatStepper} from '@angular/material';\nimport { DialogData } from 'src/app/models/dialogData';\nimport { FormGroup, Validators, FormBuilder, NgControlStatus  } from '@angular/forms';\nimport { Produto } from 'src/app/models/produto';\n\n\n@Component({\n  selector: 'app-dialog-adicionar-produto',\n  templateUrl: './dialog-adicionar-produto.component.html',\n  styleUrls: ['./dialog-adicionar-produto.component.css']\n})\nexport class DialogAdicionarProdutoComponent implements OnInit{\n\n  checked = false;\n  isLinear = true;\n  firstFormGroup: FormGroup;\n  secondFormGroup: FormGroup;\n  desabilitaBtnOK = false;\n\n  ngOnInit() {\n    this.firstFormGroup = this._formBuilder.group({\n      //firstCtrl: ['', Validators.required]\n      firstCtrl: ['']\n    });\n    this.secondFormGroup = this._formBuilder.group({\n      secondCtrl: ['', Validators.required]\n    });\n  }\n\n  constructor(\n    private _formBuilder: FormBuilder,\n    public snackBar: MatSnackBar,\n    public dialogRef: MatDialogRef<DialogAdicionarProdutoComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData) {}\n\n  onCancelClick(): void {\n    this.dialogRef.close('cancel');\n  }\n\n  onOkClick(): void {    \n    this.data.adicionar = true;\n\n    this.dialogRef.close(this.data);\n  }\n\n  onChooseSegundoSabor(segundoSaborEscolhido: Produto, stepper: MatStepper){\n    let nome = this.data.nomeProduto;\n    this.data.nomeProduto = '1/2 ';\n    this.data.nomeProduto += nome;\n    this.data.nomeProduto += ' + 1/2 ';\n    this.data.nomeProduto += segundoSaborEscolhido.nome;\n    stepper.next();\n\n    this.calcularPreco2Sabores(segundoSaborEscolhido.preco);\n    \n    this.desabilitaBtnOK = false;\n  }\n\n  onChangeQuantidade(){\n    if( this.data.observacao != null){      \n      this.openSnackBar('Atenção! A observação inserida servirá para todos os '+ this.data.quantidade +' itens. \\n' +'\"'+ this.data.observacao+'\"');\n    }\n    \n  }\n\n  iniciaRotina2Sabores(){\n    if(this.checked == true){\n      this.desabilitaBtnOK = false;\n    } else {\n      this.desabilitaBtnOK = true;\n    }\n  }\n\n  calcularPreco2Sabores(precoSegundoSabor: number){\n    if(this.data.produto2Sabores.categoria.precoMedio2Sabores == true){\n      this.data.precoCalculado = Math.round(((this.data.produto2Sabores.preco + precoSegundoSabor) / 2) * 100)/100;\n    } else {\n      \n      if(this.data.produto2Sabores.preco > precoSegundoSabor){\n        this.data.precoCalculado = this.data.produto2Sabores.preco;       \n      } else {\n        this.data.precoCalculado = precoSegundoSabor;       \n      }\n    }\n  }\n\n  openSnackBar(message: string) {\n    const config = new MatSnackBarConfig();\n    config.panelClass = ['custom-snackbar'];\n    config.duration = 7000;\n\n    this.snackBar.open(message, 'Ok', config);\n  }\n}\n","module.exports = \".example-headers-align .mat-expansion-panel-header-title, \\r\\n.example-headers-align .mat-expansion-panel-header-description {\\r\\n  flex-basis: 0;\\r\\n}\\r\\n\\r\\n.example-headers-align .mat-expansion-panel-header-description {\\r\\n  justify-content: space-between;\\r\\n  align-items: center;\\r\\n}\\r\\n\\r\\n#cardapio{\\r\\n    text-align: center;\\r\\n    font-weight: bold;\\r\\n    font-size: 18px;\\r\\n}\\r\\n\\r\\n.mat-expansion-panel-header-description{\\r\\n  height: 50px;;\\r\\n}\\r\\n\\r\\n.mat-expansion-panel-header-title {\\r\\n  color: #e6ac00;\\r\\n} \\r\\n\"","module.exports = \"<block-ui class=\\\"mat-typography\\\">   \\n<!--  FORM NOME CLIENTE -->\\n<mat-grid-list cols=\\\"1\\\" rowHeight=\\\"2:1\\\" *ngIf=\\\"nomeCliente == null\\\">\\n  <mat-grid-tile>\\n        <mat-form-field class=\\\"example-full-width\\\" layout-align=\\\"center center\\\">\\n                <input matInput placeholder=\\\"Informe seu nome\\\" #nomeCliente required>\\n        </mat-form-field>  \\n        <button mat-icon-button color=\\\"primary\\\" type=\\\"submit\\\" (click)=\\\"salvarNomeCliente(nomeCliente.value)\\\">                    \\n                <mat-icon>send</mat-icon>\\n            </button>    \\n  </mat-grid-tile>\\n</mat-grid-list>\\n<div *ngIf=\\\"nomeCliente != null\\\"> \\n<!-- MEU PEDIDO -->\\n<!-- <mat-accordion class=\\\"example-headers-align\\\">\\n  <mat-expansion-panel [expanded]=\\\"step === 1\\\" (opened)=\\\"setStep(1)\\\"  hideToggle>\\n    <mat-expansion-panel-header>      \\n      <mat-panel-title>\\n        <b>Meu pedido</b>\\n      </mat-panel-title>\\n      <mat-panel-description>\\n          <p *ngIf=\\\"meusProdutos.length > 0\\\">Detalhes do pedido</p>\\n          <p *ngIf=\\\"!meusProdutos.length > 0\\\">Adicione produtos do cardápio!</p>\\n          <mat-icon *ngIf=\\\"meusProdutos.length > 0\\\" matBadge={{meusProdutos.length}} matBadgePosition=\\\"below after\\\" matBadgeColor=\\\"warn\\\"> shopping_cart</mat-icon> \\n      </mat-panel-description>\\n    </mat-expansion-panel-header>\\n    \\n    <mat-grid-list cols=\\\"5\\\" rowHeight=\\\"5:1\\\" >\\n            <mat-grid-tile [colspan]=2><b>Item</b></mat-grid-tile>\\n            <mat-grid-tile [colspan]=1><b>Total</b></mat-grid-tile>\\n            <mat-grid-tile [colspan]=1><b>Qtde.</b></mat-grid-tile>\\n            <mat-grid-tile [colspan]=1></mat-grid-tile>\\n          </mat-grid-list>  \\n    <div *ngFor=\\\"let produto of meusProdutos\\\">\\n        <mat-grid-list cols=\\\"5\\\" rowHeight=\\\"1:1\\\" >\\n            <mat-grid-tile [colspan]=2>{{ produto.nome }}</mat-grid-tile>\\n            <mat-grid-tile [colspan]=1>{{ produto.preco}}</mat-grid-tile>\\n            <mat-grid-tile [colspan]=1>{{produto.quantidade }}</mat-grid-tile>\\n            <mat-grid-tile>\\n                <button mat-icon-button color=\\\"warn\\\" (click)=\\\"removerProduto(produto)\\\">                    \\n                    <mat-icon>remove_circle</mat-icon>\\n                </button>  \\n            </mat-grid-tile>\\n          </mat-grid-list>   \\n          <mat-grid-list cols=\\\"5\\\" rowHeight=\\\"1:1\\\" *ngIf=\\\"produto.observacao  != null\\\">\\n                <mat-grid-tile [colspan]=5><b>Obs:</b>{{ produto.observacao }}</mat-grid-tile>\\n          </mat-grid-list>                 \\n    </div>\\n    <hr>\\n    <div *ngIf=\\\"meusProdutos.length > 0\\\">\\n      <mat-grid-list cols=\\\"4\\\" rowHeight=\\\"2:1\\\" >\\n          <mat-grid-tile [colspan]=2>Total do Pedido</mat-grid-tile>\\n          <mat-grid-tile [colspan]=2><b>{{ minhaConta | currency:'BRL'}}</b></mat-grid-tile>                  \\n      </mat-grid-list> \\n      <mat-grid-list cols=\\\"4\\\" rowHeight=\\\"2:1\\\" >\\n          \\n          <mat-grid-tile [colspan]=\\\"2\\\">\\n              <button mat-raised-button color=\\\"accent\\\" (click)=\\\"enviarPedido()\\\">\\n                  Enviar Pedido\\n                  <mat-icon>send</mat-icon>\\n              </button>  \\n          </mat-grid-tile>    \\n          <mat-grid-tile></mat-grid-tile>      \\n          <mat-grid-tile><button mat-button color=\\\"primary\\\" (click)=\\\"closeStep()\\\">Esconder</button></mat-grid-tile>\\n      </mat-grid-list>                 \\n  </div>\\n  </mat-expansion-panel>\\n</mat-accordion> -->\\n<!-- PEDIDOS ENVIADOS -->\\n<mat-accordion class=\\\"example-headers-align\\\" *ngIf=\\\"pedidosEnviados?.produtos.length > 0\\\">\\n        <mat-expansion-panel [expanded]=\\\"step === 1\\\" (opened)=\\\"setStep(1)\\\"  hideToggle>\\n          <mat-expansion-panel-header>      \\n            <mat-panel-title>\\n              <b>Minha Conta</b>\\n            </mat-panel-title>\\n            <mat-panel-description>\\n                <p>Pedidos enviados</p>\\n                <mat-icon  matBadge={{pedidosEnviados?.produtos.length}} matBadgeColor=\\\"primary\\\">local_pizza</mat-icon>\\n              \\n            </mat-panel-description>\\n          </mat-expansion-panel-header>\\n          \\n          <div *ngFor=\\\"let produto of pedidosEnviados?.produtos\\\">\\n              <mat-grid-list cols=\\\"4\\\" rowHeight=\\\"2:1\\\" >\\n                  <mat-grid-tile>{{ produto.nome }}</mat-grid-tile>\\n                  <mat-grid-tile>{{ produto.preco | currency:'BRL'}}</mat-grid-tile>\\n                  <mat-grid-tile></mat-grid-tile>\\n                  <mat-grid-tile>\\n                    \\n                  </mat-grid-tile>\\n                </mat-grid-list>                    \\n          </div>\\n          <mat-grid-list cols=\\\"4\\\" rowHeight=\\\"2:1\\\" >\\n                <mat-grid-tile>Total: </mat-grid-tile>\\n                <mat-grid-tile><b>{{ minhaConta | currency:'BRL'}}</b></mat-grid-tile>\\n                <mat-grid-tile></mat-grid-tile>\\n                <mat-grid-tile></mat-grid-tile>          \\n            </mat-grid-list> \\n          <mat-grid-list cols=\\\"4\\\" rowHeight=\\\"2:1\\\" >\\n          \\n                <mat-grid-tile [colspan]=\\\"2\\\">\\n                    <button mat-raised-button color=\\\"accent\\\" (click)=\\\"fecharConta()\\\">\\n                        Fechar Conta\\n                        <mat-icon>payment</mat-icon>\\n                    </button>  \\n                </mat-grid-tile>    \\n                <mat-grid-tile></mat-grid-tile>      \\n                <mat-grid-tile><button mat-button color=\\\"accent\\\" (click)=\\\"closeStep()\\\">Esconder</button></mat-grid-tile>\\n            </mat-grid-list>   \\n        </mat-expansion-panel>\\n    </mat-accordion>\\n<!-- INICIO CARDAPIO -->\\n<!-- <mat-card ></mat-card> -->\\n<h2 id=\\\"cardapio\\\">  Cardápio</h2>\\n<mat-accordion *ngFor=\\\"let  categoria of cardapio?.categorias\\\">\\n  <mat-expansion-panel >\\n    <mat-expansion-panel-header>\\n      <mat-panel-title>\\n        <b> {{ categoria.nome }} </b>\\n      </mat-panel-title>\\n      <mat-panel-description>\\n      \\n      </mat-panel-description>\\n    </mat-expansion-panel-header>\\n    <div *ngFor=\\\"let produtoCardapio of cardapio.produtos\\\">\\n        <div *ngIf=\\\"produtoCardapio.categoria.nome == categoria.nome\\\">\\n        <mat-grid-list cols=\\\"4\\\" rowHeight=\\\"2:1\\\" >\\n            <mat-grid-tile [colspan]=2><b>{{ produtoCardapio.nome }}</b></mat-grid-tile>\\n            <mat-grid-tile [colspan]=1>{{ produtoCardapio.preco | currency:'BRL'}}</mat-grid-tile>            \\n            <mat-grid-tile [colspan]=1>\\n                <button mat-icon-button color=\\\"accent\\\" (click)=\\\"openDialog(produtoCardapio, categoria.nome)\\\">                    \\n                    <mat-icon>add_circle</mat-icon>\\n                </button>  \\n            </mat-grid-tile>  \\n                 \\n          </mat-grid-list>  \\n          <span>{{ produtoCardapio.descricao }} </span>\\n          <hr>    \\n        </div>             \\n    </div>\\n  </mat-expansion-panel>\\n</mat-accordion>\\n</div>\\n</block-ui>\\n\"","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { PedidosService } from '../pedidos.service';\nimport { Produto } from '../models/produto';\nimport { Cardapio } from '../models/cardapio';\n\n\nimport { BlockUI, NgBlockUI } from 'ng-block-ui';\nimport { Pedido } from '../models/pedido';\nimport {MatSnackBar, MatDialog, MatSnackBarConfig} from '@angular/material';\nimport { DialogAdicionarProdutoComponent } from './dialog-adicionar-produto/dialog-adicionar-produto.component';\nimport { PedidoDataService } from '../services/pedido-data.service';\n\n\n\n@Component({\n  selector: 'app-pedido',\n  templateUrl: './pedido.component.html',\n  styleUrls: ['./pedido.component.css']\n})\nexport class PedidoComponent implements OnInit {\n  \n  @Output()\n  pedidoBar = new EventEmitter();\n\n  @Input() valorQrCode: string;\n  @BlockUI() blockUI: NgBlockUI;\n\n  cardapio: Cardapio;\n  cardapio2Sabores: Produto[];\n  meuPedido: Pedido;\n  retornoEnviarPedido: any;\n  retornoBuscarCardapio: any;\n  meusProdutos: Produto[] = [];\n  nomeCliente: string = null\n  observacao: string;\n  step = 0;\n  idInterno: number = 1;\n\n  constructor(public snackBar: MatSnackBar, public dialog: MatDialog, private pedidosService: PedidosService, private pedidoDataService: PedidoDataService) { \n    this.cardapio = new Cardapio;\n    this.meuPedido = new Pedido;\n    this.cardapio2Sabores = [];\n  }\n  \n  ngOnInit() {    \n  }\n\n  buscarCardapio(){\n    this.blockUI.start('Buscando cardápio, Aguarde...'); // Start blocking\n    \n    this.pedidosService.buscarCardapio().subscribe(\n      dados => this.cardapio = dados,\n      error => this.openSnackBar(error, '📴',6000));   \n   \n    setTimeout(() => {\n      this.blockUI.stop(); // Stop blocking\n    }, 1000);\n  }\n\n  salvarNomeCliente(apelido: string){\n    if(apelido.length > 0){\n      this.nomeCliente = apelido;\n      this.buscarCardapio();\n      this.openSnackBar('Olá '+ apelido + ', para fazer um pedido, adicione produtos do nosso Cardápio!', '🍻', 6000);\n    } else {\n      this.openSnackBar('Insira seu nome para continuar!', '✏️', 3000);\n    }\n    \n  }\n\n  openSnackBar(message: string, action: string, duracao: number) {\n    const config = new MatSnackBarConfig();\n    config.panelClass = ['custom-snackbar'];\n    config.duration = duracao;\n\n    this.snackBar.open(message, action, config);\n  }\n\n  openDialog(produtoAberto: Produto, nomeCategoria: string): void {\n    console.log('Permite 2 sabores: ' + produtoAberto.categoria.permite2Sabores);\n    console.log('Usar preco medio: ' + produtoAberto.categoria.precoMedio2Sabores);\n    //Produto 2 Sabores ~~~~~~~~~~~~~~\n    if(produtoAberto.categoria.permite2Sabores == true){\n      for(let produto of this.cardapio.produtos){\n        if(produto.id == produtoAberto.id){\n          continue;\n          \n        }else if(produto.categoria.nome == nomeCategoria){\n          this.cardapio2Sabores.push(produto);                   \n        }\n      }\n      \n      const dialogRef = this.dialog.open(DialogAdicionarProdutoComponent, {\n        width: '400px',\n        data: {nomeProduto: produtoAberto.nome, quantidade: 1, permite2Sabores: true, produto2Sabores: produtoAberto, cardapio2Sabores: this.cardapio2Sabores}\n      });\n\n      dialogRef.afterClosed().subscribe(result => {\n\n        if(result != null && result.adicionar == true){\n          let prdAberto = new Produto;\n          prdAberto.id = produtoAberto.id;         \n          prdAberto.nome = result.nomeProduto;\n          \n          if(result.precoCalculado != null){\n            prdAberto.preco = result.precoCalculado * result.quantidade;\n          } else {\n            prdAberto.preco = produtoAberto.preco * result.quantidade;\n          }\n          \n          prdAberto.observacao = result.observacao;\n          prdAberto.quantidade = result.quantidade;\n  \n          this.adicionarProdutoAoPedido(prdAberto);                   \n        }\n        this.cardapio2Sabores = [];\n            \n      });\n      ///PRODUTO SIMPLES\n    } else {\n    const dialogRef = this.dialog.open(DialogAdicionarProdutoComponent, {\n      width: '400px',\n      data: {nomeProduto: produtoAberto.nome, quantidade: 1}\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n\n      if(result != null && result.adicionar == true){\n        let prdAberto = new Produto;\n        prdAberto.id = produtoAberto.id;\n        prdAberto.nome = produtoAberto.nome;\n        prdAberto.preco = produtoAberto.preco * result.quantidade;\n        prdAberto.observacao = result.observacao;\n        prdAberto.quantidade = result.quantidade;\n\n        this.adicionarProdutoAoPedido(prdAberto);         \n      }\n      //console.log('The dialog was closed');           \n    });\n   }\n  }\n\n  adicionarProdutoAoPedido(produtoAdicionado: Produto){ \n    let prd = new Produto;\n    prd.id = produtoAdicionado.id;\n    prd.nome = produtoAdicionado.nome;\n    prd.preco = produtoAdicionado.preco;\n    prd.quantidade = produtoAdicionado.quantidade;\n    prd.observacao = produtoAdicionado.observacao;\n\n    this.meusProdutos.push(prd);   \n\n    //Adiconar valor na conta\n    this.pedidoDataService.changeContaAdd(produtoAdicionado.preco)\n\n    this.meuPedido.produtos = this.meusProdutos;\n\n    //ATRIBUI DADOS DO CARDAPIO AO PEDIDO\n    if(this.meuPedido.cliente == null || this.meuPedido.mesa == null || this.meuPedido.status == null || this.meuPedido.apelido == null){\n      this.meuPedido.cliente = this.cardapio.cliente;\n      this.meuPedido.mesa = this.cardapio.mesa;\n      this.meuPedido.status = \"Enviado\";\n      this.meuPedido.apelido= this.nomeCliente;\n    }\n    //ENVIANDO PEDIDO PARA NAV-BAR COMPONENT\n    this.pedidoBar.emit(this.meuPedido);\n    this.meuPedido = new Pedido;\n\n    this.openSnackBar(produtoAdicionado.nome + \" adicionado ao carrinho!\", '🛒', 3000)\n  }\n    \n\n  fecharConta(){\n    alert('Sua conta foi fechada, dirija-se para realizar o pagamento.')\n  }\n  closeStep(){\n    this.step = 0;\n  }\n\n  setStep(index: number) {\n    this.step = index;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Pedido } from './models/pedido';\nimport { Cardapio } from './models/cardapio';\nimport { catchError, retry } from 'rxjs/operators';\nimport { throwError, Observable } from 'rxjs';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class PedidosService {\n\n  \n\n  //cardapioUrl = 'http://192.168.1.113:8080/buscarCardapio?cliente=5ba717ae0cced02530cd403f&mesa=01';\n  //enviarPedidoUrl = 'http://192.168.1.113:8080/enviarPedido';\n\n  //PROD\n  cardapioUrl = '/buscarCardapio?cliente=5ba83d9ac954ef000429345a&mesa=01';\n  enviarPedidoUrl = '/enviarPedido';\n\n  //cardapioUrl = 'https://epizza-demo.herokuapp.com/buscarCardapio?cliente=5ba83d9ac954ef000429345a&mesa=01';\n  //enviarPedidoUrl = 'https://epizza-demo.herokuapp.com/enviarPedido';\n  \n  constructor( private http: HttpClient ) { }\n\n  buscarCardapio(): Observable<Cardapio>{\n      return this.http.get<Cardapio>(`${this.cardapioUrl}`) \n          .pipe(\n            retry(2),\n            catchError(this.handleError)\n          );             \n  }\n\n  enviarPedido(pedido: Pedido){\n    return this.http.post<Pedido>(this.enviarPedidoUrl, pedido);\n  } \n\n  private handleError(error: HttpErrorResponse){\n    if( error.error instanceof ErrorEvent){\n      console.error('Client Side Error: ', error.error.message);\n    } else {\n      console.error('Server Side Error: ', error);\n    }\n\n    return throwError('Não foi possível buscar o cardápio, verifique sua conexão com a internet e tente novamente.');\n  }\n\n}\n\n","module.exports = \"\"","module.exports = \"<br>\\n<mat-grid-list cols=\\\"1\\\" rowHeight=\\\"12:1\\\">\\n  <mat-grid-tile>\\n    <button mat-raised-button color=\\\"accent\\\" (click)=\\\"iniciaScan()\\\">Escanear</button>\\n  </mat-grid-tile>\\n</mat-grid-list>\\n<br><br>\\n<div *ngIf=\\\"availableDevices\\\">\\n  <select (change)=\\\"onDeviceSelectChange($event.target.value)\\\">\\n    <option value=\\\"\\\" [selected]=\\\"!selectedDevice\\\">Selecione uma câmera</option>\\n    <option *ngFor=\\\"let device of availableDevices\\\" [value]=\\\"device.deviceId\\\" [selected]=\\\"selectedDevice && device.deviceId === selectedDevice.deviceId\\\">{{ device.label }}</option>\\n  </select>\\n</div>\\n\\n<div [hidden]=\\\"!hasCameras\\\">\\n\\n  <zxing-scanner #scanner class=\\\"test-class\\\" start=\\\"true\\\" [device]=\\\"selectedDevice\\\" (scanSuccess)=\\\"handleQrCodeResult($event)\\\"></zxing-scanner>\\n\\n  <h2 *ngIf=\\\"!this.selectedDevice\\\">Selecione uma câmera.</h2>\\n\\n  <p>\\n    Resultado:\\n    <strong>{{ qrResultString }}</strong>\\n  </p>\\n\\n</div>\\n\\n<div *ngIf=\\\"!hasCameras && hasPermission === true\\\">\\n\\n  <h1>Estamos com problemas ao reconhecer a câmera do seu dispositivo. </h1>\\n\\n</div>\\n\\n<div *ngIf=\\\"hasPermission == undefined\\\">\\n\\n  <h2>Esperando permissão de acesso à câmera.</h2>\\n\\n  <blockquote>\\n    <h3>Certifique-se de que seu dispositivo possui uma câmera.</h3>\\n  </blockquote>\\n\\n</div>\\n\\n<div *ngIf=\\\"hasPermission === false\\\">\\n\\n  <h1>Você negou o acesso à sua câmera, não conseguimos escanear o QrCode sem ela. 😪</h1>\\n\\n</div>\\n\\n\"","import { Component, OnInit, ViewChild, Output, EventEmitter } from '@angular/core';\n\nimport { ZXingScannerComponent } from '@zxing/ngx-scanner';\n\n\n\n@Component({\n  selector: 'app-scanner-qrcode',\n  templateUrl: './scanner-qrcode.component.html',\n  styleUrls: ['./scanner-qrcode.component.css']\n})\nexport class ScannerQrcodeComponent implements OnInit {\n\n  @ViewChild('scanner')\n  scanner: ZXingScannerComponent;\n\n  hasCameras = false;\n  hasPermission: boolean;\n  qrResultString: string;\n\n  availableDevices: MediaDeviceInfo[];\n  selectedDevice: MediaDeviceInfo;\n  @Output()\n  valorQrCode = new EventEmitter();\n\n  iniciaScan(){\n      this.valorQrCode.emit(\"http://localhost:8080/buscarCardapio?cliente=5ba717ae0cced02530cd403f&mesa=01\"); //comentar ao publicar\n      this.hasCameras = !this.hasCameras;\n  }\n  ngOnInit(): void {\n\n      this.scanner.camerasFound.subscribe((devices: MediaDeviceInfo[]) => {\n        //   this.hasCameras = true;\n\n          console.log('Devices: ', devices);\n          this.availableDevices = devices;\n\n          // selects the devices's back camera by default\n          for (const device of devices) {\n              if (/back|rear|environment/gi.test(device.label)) {\n                  this.scanner.changeDevice(device);\n                  this.selectedDevice = device;\n                  break;\n              }\n          }\n      });\n\n      this.scanner.camerasNotFound.subscribe((devices: MediaDeviceInfo[]) => {\n          console.log('Ocorreu um erro ao tentar inicializar sua câmera.');\n      });\n\n      this.scanner.permissionResponse.subscribe((answer: boolean) => {\n        this.hasPermission = answer;\n      });\n\n  }\n\n  \n\n  handleQrCodeResult(resultString: string) {\n      alert('QRCODE ENCONTRADO!');\n      this.qrResultString = resultString;\n      this.valorQrCode.emit(\"http://localhost:8080/buscarCardapio?cliente=5ba717ae0cced02530cd403f&mesa=01\");\n  }\n\n  onDeviceSelectChange(selectedValue: string) {\n      console.log('Selection changed: ', selectedValue);\n      this.selectedDevice = this.scanner.getDeviceById(selectedValue);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PedidoDataService {\n\n  private contaSource = new BehaviorSubject(0);\n  currentConta = this.contaSource.asObservable();\n\n  constructor() { }\n\n  changeContaAdd(valor: number){\n    let acumulate = this.contaSource.getValue();\n    acumulate += valor;\n\n    this.contaSource.next(acumulate);\n  }\n\n  changeContaRmv(valor: number){\n    let acumulate = this.contaSource.getValue();\n    acumulate -= valor;\n\n    this.contaSource.next(acumulate);\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\n\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\nimport 'hammerjs';\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n  \n"],"sourceRoot":""}